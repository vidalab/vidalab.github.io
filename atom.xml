<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Data Visualization Code]]></title>
  <link href="http://blog.vida.io/atom.xml" rel="self"/>
  <link href="http://blog.vida.io/"/>
  <updated>2014-06-23T16:38:30-07:00</updated>
  <id>http://blog.vida.io/</id>
  <author>
    <name><![CDATA[Vida Lab]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Coding Visualization Tutorial 1: Variables]]></title>
    <link href="http://blog.vida.io/2014/06/23/coding-visualization-tutorial-1-variables/"/>
    <updated>2014-06-23T14:44:42-07:00</updated>
    <id>http://blog.vida.io/2014/06/23/coding-visualization-tutorial-1-variables</id>
    <content type="html"><![CDATA[<p>In this tutorial, we want to explore Javascript variables. They are important code components. We will review the major variable types that you&rsquo;ll see in a D3 visualization. Then we will dive into visualization examples and play with variables.</p>

<p>You can declare Javascript variables as below:</p>

<!-- more -->


<p>(// is comment)</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="c1">// declare WIDTH variable, the type is integer</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">WIDTH</span> <span class="o">=</span> <span class="mi">800</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// declare HEIGHT variable, the type is integer</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">HEIGHT</span> <span class="o">=</span> <span class="mi">500</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// declare margin as hash with keys are 4 corners of visualization,</span>
</span><span class='line'><span class="c1">// hash is a key value pair, use key to access value,</span>
</span><span class='line'><span class="c1">// for example, margin.top returns an integer of value 20</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">margin</span> <span class="o">=</span> <span class="p">{</span><span class="nx">top</span><span class="o">:</span> <span class="mi">20</span><span class="p">,</span> <span class="nx">right</span><span class="o">:</span> <span class="mi">20</span><span class="p">,</span> <span class="nx">bottom</span><span class="o">:</span> <span class="mi">30</span><span class="p">,</span> <span class="nx">left</span><span class="o">:</span> <span class="mi">50</span><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// string variable</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">Y_AXIS_LABEL</span> <span class="o">=</span> <span class="s2">&quot;Price ($)&quot;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// array variable</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">data</span> <span class="o">=</span> <span class="p">[];</span>
</span><span class='line'><span class="c1">// add 2 data points to data array</span>
</span><span class='line'><span class="nx">data</span><span class="p">.</span><span class="nx">push</span><span class="p">({</span><span class="nx">x_axis</span><span class="o">:</span> <span class="s2">&quot;1-May-12&quot;</span><span class="p">},</span> <span class="p">{</span><span class="nx">y_axis</span><span class="o">:</span> <span class="mf">582.13</span><span class="p">});</span>
</span><span class='line'><span class="nx">data</span><span class="p">.</span><span class="nx">push</span><span class="p">({</span><span class="nx">x_axis</span><span class="o">:</span> <span class="s2">&quot;30-May-12&quot;</span><span class="p">},</span> <span class="p">{</span><span class="nx">y_axis</span><span class="o">:</span> <span class="mf">583.98</span><span class="p">});</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// boolean variable, 2 values: true or false</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">check</span> <span class="o">=</span> <span class="kc">true</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// variable can be an object which means it can be anything</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">xAxis</span> <span class="o">=</span> <span class="nx">d3</span><span class="p">.</span><span class="nx">svg</span><span class="p">.</span><span class="nx">axis</span><span class="p">()</span>
</span><span class='line'>    <span class="p">.</span><span class="nx">scale</span><span class="p">(</span><span class="nx">x</span><span class="p">)</span>
</span><span class='line'>    <span class="p">.</span><span class="nx">orient</span><span class="p">(</span><span class="s2">&quot;bottom&quot;</span><span class="p">);</span>
</span><span class='line'><span class="c1">// think of xAxis as a d3 axis type, it can do some axis magic</span>
</span></code></pre></td></tr></table></div></figure>


<p>Things you can do with variables:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="c1">// for number, arithmetic</span>
</span><span class='line'><span class="c1">// calculate real width, height of visualization</span>
</span><span class='line'><span class="c1">// by subtracting margins, number can be subtracted</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">width</span> <span class="o">=</span> <span class="nx">WIDTH</span> <span class="o">-</span> <span class="nx">margin</span><span class="p">.</span><span class="nx">left</span> <span class="o">-</span> <span class="nx">margin</span><span class="p">.</span><span class="nx">right</span><span class="p">;</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">height</span> <span class="o">=</span> <span class="nx">HEIGHT</span> <span class="o">-</span> <span class="nx">margin</span><span class="p">.</span><span class="nx">top</span> <span class="o">-</span> <span class="nx">margin</span><span class="p">.</span><span class="nx">bottom</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// you can concatenate string with +</span>
</span><span class='line'><span class="nx">Y_AXIS_LABEL</span> <span class="o">=</span> <span class="nx">Y_AXIS_LABEL</span> <span class="o">+</span>  <span class="s2">&quot; &quot;</span> <span class="o">+</span> <span class="s2">&quot;Dollars&quot;</span><span class="p">;</span>
</span><span class='line'><span class="c1">// now Y_AXIS_LABEL is &quot;Price ($) Dollars&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// access data array</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// data[0] returns 1st data point</span>
</span><span class='line'><span class="c1">// check if value of 2nd data point is greater than 1st data point</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">check</span> <span class="o">=</span> <span class="nx">data</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="nx">y_axis</span> <span class="o">&gt;</span> <span class="nx">data</span><span class="p">[</span><span class="mi">1</span><span class="p">].</span><span class="nx">y_axis</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Here&rsquo;s an example D3 document you can use:</p>

<p><a href="https://vida.io/documents/9Pst6wmB83BgRZXgx">https://vida.io/documents/9Pst6wmB83BgRZXgx</a></p>

<p>See tutorial video here:</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Extract Web Data With import.io and Create D3 Visualization]]></title>
    <link href="http://blog.vida.io/2014/06/08/extract-web-data-with-import-dot-io-and-create-d3-visualization/"/>
    <updated>2014-06-08T22:45:06-07:00</updated>
    <id>http://blog.vida.io/2014/06/08/extract-web-data-with-import-dot-io-and-create-d3-visualization</id>
    <content type="html"><![CDATA[<p>With vida.io, you can quickly create new data visualizations. But how would you collect the data? There are now powerful and easy to use tools for this task. In this article, I will show you how to use import.io to extract web data and create d3 map visualization.</p>

<!-- more -->


<ol>
<li>Download <a href="https://import.io/">import.io</a> app.</li>
<li>Register your account and and login.</li>
<li>Create a new dataset. This will open a new tab.</li>
<li>Click Add Data menu and select &ldquo;Create new Source&rdquo; from drop down.</li>
<li>Enter wikipedia data source into import.io URL browser: <a href="http://en.wikipedia.org/wiki/Obesity_in_the_United_States">http://en.wikipedia.org/wiki/Obesity_in_the_United_States</a></li>
<li>Extract data and upload to import.io. Final data will look like this:<img src="https://s3-us-west-2.amazonaws.com/vida-public/blog/import-io-dataset.png" width="600"></li>
</ol>


<p>Once we are done with you can download data from import.io to CSV format. It is now ready for visualization on <a href="https://vida.io">vida.io</a>. Register an account if you don&rsquo;t have one.</p>

<ol>
<li>Open <a href="https://vida.io/d3-map">d3-map</a> page.</li>
<li>Select &ldquo;US Map States &ndash; Choropleth&rdquo; template and clone to your account.</li>
<li>Rename visualization (e.g. Obesity in the United States) and add description.</li>
<li>Go to data tab and import downloaded CSV file above. Click Save to save data.</li>
<li>Go to properties tab, select state_and_district_of_columbia for Map State field and overweight_incl_obese_adults_number for Map Value field.</li>
<li>Click Save to refresh visualization. Here&rsquo;s the <a href="https://vida.io/documents/bJDg3iQwyXcfngjgf">final visualization</a>:</li>
</ol>


<iframe src="http://embed.vida.io/documents/bJDg3iQwyXcfngjgf" width="800" height="450" seamless frameBorder="0" scrolling="no"></iframe>


<p>That&rsquo;s it! Check out more templates on <a href="https://vida.io/explore">Explore</a> section.</p>

<p>Here&rsquo;s a video tutorial that walks you through all the steps above:</p>

<iframe width="600" height="450" src="//www.youtube.com/embed/b4vxnmdZN98" frameborder="0" allowfullscreen></iframe>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Embed d3.js Visualization to Blog]]></title>
    <link href="http://blog.vida.io/2014/05/31/embed-d3-dot-js-visualization-to-blog/"/>
    <updated>2014-05-31T23:54:14-07:00</updated>
    <id>http://blog.vida.io/2014/05/31/embed-d3-dot-js-visualization-to-blog</id>
    <content type="html"><![CDATA[<p>I recently got a question from our user on how to embed d3.js visualization into their blog. A quick search returns several solutions like bl.ocks.org or Wordpress D3 plugin. The first solution requires programmer intervention each time content owner needs to update the site. Wordpress D3 plugin requires installation of plugin.</p>

<p>There comes <a href="https://vida.io">vida.io</a> embed. Our site provides simple solution. Blog content owner can update post without programmer&rsquo;s intervention. In case of visualization update, he/she can use <a href="https://vida.io">vida.io</a> editor to quickly make change.</p>

<!-- more -->


<p>Here&rsquo;s an example:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;iframe</span> <span class="na">src=</span><span class="s">&quot;http://embed.vida.io/documents/SodotqYWppo6NWK9m&quot;</span> <span class="na">width=</span><span class="s">&quot;100%&quot;</span> <span class="na">height=</span><span class="s">&quot;340&quot;</span> <span class="na">seamless</span> <span class="na">frameBorder=</span><span class="s">&quot;0&quot;</span> <span class="na">scrolling=</span><span class="s">&quot;no&quot;</span><span class="nt">&gt;&lt;/iframe&gt;</span>
</span></code></pre></td></tr></table></div></figure>




<iframe src="http://embed.vida.io/documents/SodotqYWppo6NWK9m" width="100%" height="340" seamless frameBorder="0" scrolling="no"></iframe>


<p>The above visualization is responsive to window width. It fits to mobile devices. This is supported by viewbox resize technique:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">function</span> <span class="nx">resizeViewbox</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">targetWidth</span> <span class="o">=</span> <span class="nx">$</span><span class="p">(</span><span class="s1">&#39;#canvas&#39;</span><span class="p">).</span><span class="nx">width</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="nx">targetWidth</span> <span class="o">&gt;</span> <span class="nx">frameWidth</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">targetWidth</span> <span class="o">=</span> <span class="nx">frameWidth</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="nx">chart</span><span class="p">.</span><span class="nx">attr</span><span class="p">(</span><span class="s2">&quot;width&quot;</span><span class="p">,</span> <span class="nx">targetWidth</span><span class="p">);</span>
</span><span class='line'>    <span class="nx">chart</span><span class="p">.</span><span class="nx">attr</span><span class="p">(</span><span class="s2">&quot;height&quot;</span><span class="p">,</span> <span class="nx">targetWidth</span> <span class="o">/</span> <span class="nx">aspect</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>It&rsquo;s a simple technique that works with <a href="https://vida.io">vida.io</a> embed. <a href="mailto:contact@vida.io">Contact us</a> if you have any question.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Experiment With d3.js in the Cloud]]></title>
    <link href="http://blog.vida.io/2014/05/28/experiment-with-d3-dot-js-in-the-cloud/"/>
    <updated>2014-05-28T00:12:31-07:00</updated>
    <id>http://blog.vida.io/2014/05/28/experiment-with-d3-dot-js-in-the-cloud</id>
    <content type="html"><![CDATA[<p>bl.ocks.org is a popular tool within D3 community for sharing data visualization. While it is great to be able to share visualization, bl.ocks.org is not easy to experiment with your visualization.</p>

<p>We are building a new offering at vida.io to enable cloud experimentation. You can quickly import and play with the visualization.</p>

<p>Video demo:</p>

<iframe width="420" height="315" src="//www.youtube.com/embed/e1BOJnW9N3Q" frameborder="0" allowfullscreen></iframe>


<p>In this post, we&rsquo;ll use this bl.ocks.org example for d3noob:</p>

<p><a href="http://bl.ocks.org/d3noob/5141278">Basic Directional Force Layout Diagram</a></p>

<!-- more -->


<p>Here are the steps to import bl.ocks.org to <a href="https://vida.io">vida.io</a>:</p>

<ol>
<li>Create a new document in vida.io</li>
<li>Copy stylesheet code to Stylesheet tab</li>
</ol>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='css'><span class='line'><span class="nt">path</span><span class="nc">.link</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">fill</span><span class="o">:</span> <span class="k">none</span><span class="p">;</span>
</span><span class='line'>  <span class="n">stroke</span><span class="o">:</span> <span class="m">#666</span><span class="p">;</span>
</span><span class='line'>  <span class="n">stroke</span><span class="o">-</span><span class="k">width</span><span class="o">:</span> <span class="m">1.5px</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="nt">circle</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">fill</span><span class="o">:</span> <span class="m">#ccc</span><span class="p">;</span>
</span><span class='line'>  <span class="n">stroke</span><span class="o">:</span> <span class="m">#fff</span><span class="p">;</span>
</span><span class='line'>  <span class="n">stroke</span><span class="o">-</span><span class="k">width</span><span class="o">:</span> <span class="m">1.5px</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="nt">text</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">fill</span><span class="o">:</span> <span class="m">#000</span><span class="p">;</span>
</span><span class='line'>  <span class="k">font</span><span class="o">:</span> <span class="m">10px</span> <span class="k">sans-serif</span><span class="p">;</span>
</span><span class='line'>  <span class="k">pointer</span><span class="o">-</span><span class="n">events</span><span class="o">:</span> <span class="k">none</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<ol>
<li>Copy javascript code to Javascript tab. No need to copy d3.csv call, data field is already declared by vida.io</li>
</ol>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">nodes</span> <span class="o">=</span> <span class="p">{};</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Compute the distinct nodes from the links.</span>
</span><span class='line'><span class="nx">links</span><span class="p">.</span><span class="nx">forEach</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">link</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">link</span><span class="p">.</span><span class="nx">source</span> <span class="o">=</span> <span class="nx">nodes</span><span class="p">[</span><span class="nx">link</span><span class="p">.</span><span class="nx">source</span><span class="p">]</span> <span class="o">||</span>
</span><span class='line'>        <span class="p">(</span><span class="nx">nodes</span><span class="p">[</span><span class="nx">link</span><span class="p">.</span><span class="nx">source</span><span class="p">]</span> <span class="o">=</span> <span class="p">{</span><span class="nx">name</span><span class="o">:</span> <span class="nx">link</span><span class="p">.</span><span class="nx">source</span><span class="p">});</span>
</span><span class='line'>    <span class="nx">link</span><span class="p">.</span><span class="nx">target</span> <span class="o">=</span> <span class="nx">nodes</span><span class="p">[</span><span class="nx">link</span><span class="p">.</span><span class="nx">target</span><span class="p">]</span> <span class="o">||</span>
</span><span class='line'>        <span class="p">(</span><span class="nx">nodes</span><span class="p">[</span><span class="nx">link</span><span class="p">.</span><span class="nx">target</span><span class="p">]</span> <span class="o">=</span> <span class="p">{</span><span class="nx">name</span><span class="o">:</span> <span class="nx">link</span><span class="p">.</span><span class="nx">target</span><span class="p">});</span>
</span><span class='line'>    <span class="nx">link</span><span class="p">.</span><span class="nx">value</span> <span class="o">=</span> <span class="o">+</span><span class="nx">link</span><span class="p">.</span><span class="nx">value</span><span class="p">;</span>
</span><span class='line'><span class="p">});</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// ...</span>
</span><span class='line'>
</span><span class='line'>    <span class="nx">node</span>
</span><span class='line'>        <span class="p">.</span><span class="nx">attr</span><span class="p">(</span><span class="s2">&quot;transform&quot;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">d</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>          <span class="k">return</span> <span class="s2">&quot;translate(&quot;</span> <span class="o">+</span> <span class="nx">d</span><span class="p">.</span><span class="nx">x</span> <span class="o">+</span> <span class="s2">&quot;,&quot;</span> <span class="o">+</span> <span class="nx">d</span><span class="p">.</span><span class="nx">y</span> <span class="o">+</span> <span class="s2">&quot;)&quot;</span><span class="p">;</span> <span class="p">});</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<ol>
<li>Rename links variable name to data</li>
</ol>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="c1">// links.forEach(function(link) {</span>
</span><span class='line'>
</span><span class='line'><span class="nx">data</span><span class="p">.</span><span class="nx">forEach</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">link</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// .links(links) </span>
</span><span class='line'>
</span><span class='line'><span class="p">.</span><span class="nx">links</span><span class="p">(</span><span class="nx">data</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<ol>
<li>Copy force.csv data to Data tab</li>
<li>Save to refresh the visualization. You can start tweaking parameters of the visualization.</li>
</ol>


<p>Here is the final result document:</p>

<p><a href="https://vida.io/documents/XWsLjooRt6KXadzT9">Directional Force Layout</a></p>
]]></content>
  </entry>
  
</feed>
